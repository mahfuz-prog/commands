Git bash
Generate ssh key
https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

ssh-keygen -t ed25519 -C "github gmail"

copy ssh key
clip < ~/.ssh/id_ed25519.pub	

to clone a git repo from github, copy ssh code
git clone git@github.com:mahfuz-prog/gitNgithub.git
git clone git@github.com:mahfuz-prog/gitNgithub.git . 		#to clone all files in working directory	

show hidden file
ls -la		

to remove local ssh key from root directory
key located in .ssh file
rm -r .ssh
than remove the folder

set username and email on repo
git config --global user.name "Username"
git config --global user.email "demo@gmail.com"
git config --list

create a repository on github and copy ssh command from github
git init		#initial local repository as a git repository
git add .		#stage
git reset filename	#remove file from the staging area
git reset		#remove everything from staging

git commit -m "Initial commit" 			#to commit
git commit --amend -m 'commit title'		#to change commit title, Not to push this with other people
git branch -M main
git remote add origin git@github.com:mahfuz-prog/gitNgithub.git
git push -u origin main

Branches
git branch
git branch branch-name			#create branch
git checkout branch-name 		#switch branch
git marge branch-name			#first switch main then marge branch-name
git push -u origin branch-name		#remote
git branch -d branch-name 		#remove branch from local directory
git push origin --delete branch-name 	#delete from remote

to see remote repo
git remote -v
git branch -a 		#all branches local & remote

git clean -df		#remove all untract file

to see changes
git diff
git diff filename

to see edits in stage 
git diff --staged filename

to reset all files
git checkout .

--------------------------------------------------------------------------------
rules
https://gist.github.com/octocat/9257657
Create a .gitignore file for your repository.
touch .gitignore

# ignore all .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in any directory named build
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory and any of its subdirectories
doc/**/*.pdf
----------------------------------------------------------------------------------

to recover 
git reflog
git checkout hash
git branch backup